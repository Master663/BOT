import asyncio
import logging
import random
import json 
from urllib.parse import quote, unquote
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7856912713:AAHs1OQ4N5bQ-qCEdBhd_wl-mfOBEGCW66U'
SUPER_ADMIN_ID = 7877979174

DATABASE_URL = "postgresql://htsd_user:csKusK0S8l0l5yXnn6TJZtPaNN9qUGIQ@dpg-d0m6hap5pdvs738v8fq0-a/htsd"


bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)

DB_POOL = None

back_to_admin_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚¨ÖÔ∏è Admin panele ga√Ωtmak", callback_data="admin_panel_main")]
])

class SubscriptionStates(StatesGroup):
    checking_subscription = State()

class AdminStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_channel_to_delete = State()
    waiting_for_vpn_config = State()
    waiting_for_vpn_config_to_delete = State()
    waiting_for_welcome_message = State()
    waiting_for_user_mail_action = State()
    waiting_for_mailing_message = State()
    waiting_for_mailing_confirmation = State()
    waiting_for_mailing_buttons = State()
    waiting_for_channel_mail_action = State() 
    waiting_for_channel_mailing_message = State()
    waiting_for_channel_mailing_confirmation = State()
    waiting_for_channel_mailing_buttons = State()
    waiting_for_admin_id_to_add = State()
    waiting_for_addlist_url = State()
    waiting_for_addlist_name = State()

async def init_db(pool):
    async with pool.acquire() as connection:
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS bot_settings (
                key TEXT PRIMARY KEY,
                value TEXT
            );
        """)
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS channels (
                id SERIAL PRIMARY KEY,
                channel_id TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL
            );
        """)
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS addlists (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                url TEXT UNIQUE NOT NULL
            );
        """)
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS vpn_configs (
                id SERIAL PRIMARY KEY,
                config_text TEXT UNIQUE NOT NULL
            );
        """)
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS bot_users (
                user_id BIGINT PRIMARY KEY
            );
        """)
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS bot_admins (
                user_id BIGINT PRIMARY KEY
            );
        """)
        default_welcome = "üëã <b>Ho≈ü geldi≈àiz!</b>\n\nVPN Koduny almak √º√ßin, a≈üakdaky Kanallara Agza bolu≈à we so≈àra Agza boldum d√ºwmesine basy≈à."
        await connection.execute(
            "INSERT INTO bot_settings (key, value) VALUES ($1, $2) ON CONFLICT (key) DO NOTHING",
            'welcome_message', default_welcome
        )

async def get_setting_from_db(key: str, default: str = None):
    async with DB_POOL.acquire() as conn:
        row = await conn.fetchrow("SELECT value FROM bot_settings WHERE key = $1", key)
        return row['value'] if row else default

async def save_setting_to_db(key: str, value: str):
    async with DB_POOL.acquire() as conn:
        await conn.execute(
            "INSERT INTO bot_settings (key, value) VALUES ($1, $2) ON CONFLICT (key) DO UPDATE SET value = $2",
            key, value
        )

async def save_last_mail_content(content: dict, keyboard: InlineKeyboardMarkup | None, mail_type: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    content_json = json.dumps(content)
    await save_setting_to_db(f'last_{mail_type}_mail_content', content_json)
    
    if keyboard:
        keyboard_json = json.dumps(keyboard.dict())
        await save_setting_to_db(f'last_{mail_type}_mail_keyboard', keyboard_json)
    else:
        await save_setting_to_db(f'last_{mail_type}_mail_keyboard', 'null')

async def get_last_mail_content(mail_type: str) -> tuple[dict | None, InlineKeyboardMarkup | None]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    content = None
    keyboard = None
    
    content_json = await get_setting_from_db(f'last_{mail_type}_mail_content')
    if content_json:
        content = json.loads(content_json)
        
    keyboard_json = await get_setting_from_db(f'last_{mail_type}_mail_keyboard')
    if keyboard_json and keyboard_json != 'null':
        keyboard_data = json.loads(keyboard_json)
        keyboard = InlineKeyboardMarkup.model_validate(keyboard_data)
        
    return content, keyboard

async def send_mail_preview(chat_id: int, content: dict, keyboard: InlineKeyboardMarkup | None = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞)."""
    content_type = content.get('type')
    caption = content.get('caption')
    text = content.get('text')
    file_id = content.get('file_id')

    if content_type == 'text':
        return await bot.send_message(chat_id, text, reply_markup=keyboard)
    elif content_type == 'photo':
        return await bot.send_photo(chat_id, file_id, caption=caption, reply_markup=keyboard)
    elif content_type == 'video':
        return await bot.send_video(chat_id, file_id, caption=caption, reply_markup=keyboard)
    elif content_type == 'animation':
        return await bot.send_animation(chat_id, file_id, caption=caption, reply_markup=keyboard)


async def get_channels_from_db():
    async with DB_POOL.acquire() as conn:
        rows = await conn.fetch("SELECT channel_id, name FROM channels ORDER BY name")
        return [{"id": row['channel_id'], "name": row['name']} for row in rows]

async def add_channel_to_db(channel_id: str, name: str):
    async with DB_POOL.acquire() as conn:
        try:
            await conn.execute("INSERT INTO channels (channel_id, name) VALUES ($1, $2)", str(channel_id), name)
            return True
        except asyncpg.UniqueViolationError:
            logging.warning(f"Channel {channel_id} already exists.")
            return False
        except Exception as e:
            logging.error(f"Error adding channel {channel_id} to DB: {e}")
            return False

async def delete_channel_from_db(channel_id: str):
    async with DB_POOL.acquire() as conn:
        result = await conn.execute("DELETE FROM channels WHERE channel_id = $1", str(channel_id))
        return result != "DELETE 0"


async def get_addlists_from_db():
    async with DB_POOL.acquire() as conn:
        rows = await conn.fetch("SELECT id, name, url FROM addlists ORDER BY name")
        return [{"db_id": row['id'], "name": row['name'], "url": row['url']} for row in rows]

async def add_addlist_to_db(name: str, url: str):
    async with DB_POOL.acquire() as conn:
        try:
            await conn.execute("INSERT INTO addlists (name, url) VALUES ($1, $2)", name, url)
            return True
        except asyncpg.UniqueViolationError:
            logging.warning(f"Addlist URL {url} already exists.")
            return False
        except Exception as e:
            logging.error(f"Error adding addlist {name} to DB: {e}")
            return False

async def delete_addlist_from_db(db_id: int):
    async with DB_POOL.acquire() as conn:
        result = await conn.execute("DELETE FROM addlists WHERE id = $1", db_id)
        return result != "DELETE 0"

async def get_vpn_configs_from_db():
    async with DB_POOL.acquire() as conn:
        rows = await conn.fetch("SELECT id, config_text FROM vpn_configs ORDER BY id")
        return [{"db_id": row['id'], "config_text": row['config_text']} for row in rows]


async def add_vpn_config_to_db(config_text: str):
    async with DB_POOL.acquire() as conn:
        try:
            await conn.execute("INSERT INTO vpn_configs (config_text) VALUES ($1)", config_text)
            return True
        except asyncpg.UniqueViolationError:
            logging.warning(f"VPN config already exists.")
            return False
        except Exception as e:
            logging.error(f"Error adding VPN config to DB: {e}")
            return False

async def delete_vpn_config_from_db(db_id: int):
    async with DB_POOL.acquire() as conn:
        result = await conn.execute("DELETE FROM vpn_configs WHERE id = $1", db_id)
        return result != "DELETE 0"

async def get_users_from_db():
    async with DB_POOL.acquire() as conn:
        rows = await conn.fetch("SELECT user_id FROM bot_users")
        return [row['user_id'] for row in rows]

async def add_user_to_db(user_id: int):
    async with DB_POOL.acquire() as conn:
        try:
            await conn.execute("INSERT INTO bot_users (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING", user_id)
        except Exception as e:
            logging.error(f"Error adding user {user_id} to DB: {e}")


async def get_admins_from_db():
    async with DB_POOL.acquire() as conn:
        rows = await conn.fetch("SELECT user_id FROM bot_admins")
        return [row['user_id'] for row in rows]

async def add_admin_to_db(user_id: int):
    async with DB_POOL.acquire() as conn:
        try:
            await conn.execute("INSERT INTO bot_admins (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING", user_id)
            return True
        except Exception as e:
            logging.error(f"Error adding admin {user_id} to DB: {e}")
            return False

async def delete_admin_from_db(user_id: int):
    async with DB_POOL.acquire() as conn:
        result = await conn.execute("DELETE FROM bot_admins WHERE user_id = $1", user_id)
        return result != "DELETE 0"

async def is_user_admin_in_db(user_id: int) -> bool:
    if user_id == SUPER_ADMIN_ID:
        return True
    admins = await get_admins_from_db()
    return user_id in admins

async def create_subscription_task_keyboard(user_id: int) -> InlineKeyboardMarkup:
    channels = await get_channels_from_db()
    addlists = await get_addlists_from_db()
    keyboard_buttons = []

    for channel in channels:
        try:
            member = await bot.get_chat_member(chat_id=channel['id'], user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator', 'restricted'] or \
               (member.status == 'restricted' and hasattr(member, 'is_member') and not member.is_member):
                keyboard_buttons.append([
                    InlineKeyboardButton(text=f"{channel['name']}", url=f"https://t.me/{str(channel['id']).lstrip('@')}")
                ])
        except Exception as e:
            logging.error(f"Kanala agzalygy barlamakda √Ωal≈ày≈ülyk {channel['id']} ulanyjy {user_id} √º√ßin: {e}")
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚ö†Ô∏è {channel['name']} (barlag √Ωal≈ày≈ülygy)", url=f"https://t.me/{str(channel['id']).lstrip('@')}")
            ])
            continue
    for addlist in addlists:
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{addlist['name']}", url=addlist['url'])
        ])
    if keyboard_buttons:
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚úÖ Agza Boldum", callback_data="check_subscription")
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

async def has_unsubscribed_channels(user_id: int) -> bool:
    channels = await get_channels_from_db()
    if not channels:
        return False
    for channel in channels:
        try:
            chat_identifier = channel['id']
            if not (isinstance(chat_identifier, str) and chat_identifier.startswith('@')):
                try:
                    chat_identifier = int(str(chat_identifier))
                except ValueError:
                    logging.error(f"get_chat_member √º√ßin n√§dogry kanal ID formaty: {channel['id']}. Ge√ßiril√Ω√§r.")
                    return True
            member = await bot.get_chat_member(chat_id=chat_identifier, user_id=user_id)
            if member.status == 'restricted':
                if hasattr(member, 'is_member') and not member.is_member:
                    logging.info(f"Ulanyjy {user_id} {channel['id']} kanala AGZA BOLMADYK (√Ωagda√Ωy: {member.status}, is_member=False)")
                    return True
            elif member.status not in ['member', 'administrator', 'creator']:
                logging.info(f"Ulanyjy {user_id} {channel['id']} kanala AGZA BOLMADYK (√Ωagda√Ωy: {member.status})")
                return True
        except TelegramForbiddenError:
            logging.error(f"TelegramForbiddenError: Bot {channel['id']} kanaly≈à adminy d√§l. Howpsuzlyk √º√ßin ulanyjy agza bolmadyk hasaplan√Ωar.")
            return True
        except TelegramBadRequest as e:
            logging.warning(f"Ulanyjy {user_id}-i≈à {channel['id']} kanala agzalygy barlanda TelegramBadRequest: {e}. Ulanyjy agza bolmadyk hasaplan√Ωar.")
            return True
        except Exception as e:
            logging.warning(f"Ulanyjy {user_id}-i≈à {channel['id']} kanala agzalygyny barlanda umumy √Ωal≈ày≈ülyk: {e}. Ulanyjy Agza bolmadyk hasaplan√Ωar.")
            return True
    return False

def create_admin_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üìä Bot statistikasy", callback_data="get_stats")],
        [InlineKeyboardButton(text="üöÄ Ulanyjylara ibermek", callback_data="start_mailing"),
         InlineKeyboardButton(text="üì¢ Kanallara ibermek", callback_data="start_channel_mailing")],
        [InlineKeyboardButton(text="‚ûï Kanal go≈ümak", callback_data="add_channel"), InlineKeyboardButton(text="‚ûñ Kanal pozmak", callback_data="delete_channel")],
        [InlineKeyboardButton(text="üìÅ addlist go≈ümak", callback_data="add_addlist"), InlineKeyboardButton(text="üóëÔ∏è addlist pozmak", callback_data="delete_addlist")],
        [InlineKeyboardButton(text="üîë VPN go≈ümak", callback_data="add_vpn_config"), InlineKeyboardButton(text="üóëÔ∏è VPN pozmak", callback_data="delete_vpn_config")],
        [InlineKeyboardButton(text="‚úèÔ∏è Ba≈ülangy√ß haty √º√Ωtgetmek", callback_data="change_welcome")]
    ]
    if user_id == SUPER_ADMIN_ID:
        buttons.extend([
            [InlineKeyboardButton(text="üëÆ Admin go≈ümak", callback_data="add_admin"), InlineKeyboardButton(text="üö´ Admin pozmak", callback_data="delete_admin")]
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Admin panelden √ßykmak", callback_data="exit_admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await add_user_to_db(user_id)

    vpn_configs_full = await get_vpn_configs_from_db()
    vpn_configs = [item['config_text'] for item in vpn_configs_full]

    if not vpn_configs:
        await message.answer("üòî Gynansak-da, h√§zirki wagtda el√Ωeterli VPN Kodlary √Ωok. Ha√Ωy≈ü ed√Ω√§ris, so≈àrak synany≈üy≈à.")
        await state.clear()
        return

    user_needs_to_subscribe_to_channels = await has_unsubscribed_channels(user_id)
    channels_exist = bool(await get_channels_from_db())

    if not user_needs_to_subscribe_to_channels:
        vpn_config_text = random.choice(vpn_configs)
        text = "üéâ Siz √§hli kanallara Agza boldy≈àyz! " if channels_exist else "‚ú® Agza bolany≈àyz√º√ßin sagbolu≈à!"
        await message.answer(
            f"{text}\n\n"
            f"üîë <b>sizi≈à VPN Kody≈àyz:</b>\n<pre><code>{vpn_config_text}</code></pre>"
        )
        await state.clear()
    else:
        keyboard = await create_subscription_task_keyboard(user_id)
        welcome_text = await get_setting_from_db('welcome_message', "üëã <b>Ho≈ü geldi≈àiz!</b>\n\nVPN almak √º√ßin, a≈üakdaky Kanallara agza bolu≈à we 'Agza boldum' d√ºwmesine basy≈à.")
        if not keyboard.inline_keyboard:
            if vpn_configs:
                 vpn_config_text = random.choice(vpn_configs)
                 await message.answer(f"‚ú® Agza bolany≈àyz √º√ßin sagbolu≈à!\n\nüîë <b>Sizi≈à VPN Kody≈àyz:</b>\n<pre><code>{vpn_config_text}</code></pre>")
            else:
                 await message.answer("üòî H√§zirki wagtda el√Ωeterli VPN kodlary √Ωok.")
            await state.clear()
        else:
            await message.answer(welcome_text, reply_markup=keyboard)
            await state.set_state(SubscriptionStates.checking_subscription)

@router.message(Command("admin"))
async def admin_command(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id):
        await message.answer("‚õî Bu bu√Ωruga girm√§ge rugsady≈àyz √Ωok.")
        return
    await message.answer("‚öôÔ∏è <b>Admin-panel</b>\n\nBir hereket sa√Ωla≈à:", reply_markup=create_admin_keyboard(message.from_user.id))
    await state.clear()

@router.callback_query(lambda c: c.data == "exit_admin_panel")
async def exit_admin_panel_handler(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    await state.clear()
    try:
        await callback.message.edit_text(
            "‚úÖ Siz admin panelden √ßykdy≈àyz.\n\nAdaty ulanyjy h√∂km√ºnde t√§zeden i≈üe ba≈ülamak √º√ßin /start girizi≈à",
            reply_markup=None
        )
    except TelegramBadRequest:
        await callback.message.answer(
            "‚úÖ Siz admin panelden √ßykdy≈àyz.\n\nAdaty ulanyjy h√∂km√ºnde t√§zeden i≈üe ba≈ülamak √º√ßin /start girizi≈à",
            reply_markup=None
        )
    await callback.answer()

@router.callback_query(lambda c: c.data == "get_stats")
async def get_statistics(callback: types.CallbackQuery):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    async with DB_POOL.acquire() as conn:
        user_count = await conn.fetchval("SELECT COUNT(*) FROM bot_users")
        channel_count = await conn.fetchval("SELECT COUNT(*) FROM channels")
        addlist_count = await conn.fetchval("SELECT COUNT(*) FROM addlists")
        vpn_count = await conn.fetchval("SELECT COUNT(*) FROM vpn_configs")
        admin_count = await conn.fetchval("SELECT COUNT(*) FROM bot_admins")

    status_description = "Bot i≈üle√Ω√§r" if vpn_count > 0 else "VPN KODLARY √ùOK!"
    alert_text = (
        f"üìä Bot statistikasy:\n"
        f"üë§ Ulanyjylar: {user_count}\n"
        f"üì¢ Kanallar: {channel_count}\n"
        f"üìÅ addlistlar: {addlist_count}\n"
        f"üîë VPN Kodlary: {vpn_count}\n"
        f"üëÆ Adminler (go≈üm.): {admin_count}\n"
        f"‚öôÔ∏è √ùagda√Ωy: {status_description}"
    )
    try:
        await callback.answer(text=alert_text, show_alert=True)
    except Exception as e:
        logging.error(f"Statistikany du√Ωdury≈üda g√∂rkezmekde √Ωal≈ày≈ülyk: {e}")
        await callback.answer("‚ö†Ô∏è Statistika g√∂rkezmekde √Ωal≈ày≈ülyk.", show_alert=True)


def parse_buttons_from_text(text: str) -> types.InlineKeyboardMarkup | None:
    lines = text.strip().split('\n')
    keyboard_buttons = []
    for line in lines:
        if ' - ' not in line:
            continue
        parts = line.split(' - ', 1)
        btn_text = parts[0].strip()
        btn_url = parts[1].strip()
        if btn_text and (btn_url.startswith('https://') or btn_url.startswith('http://')):
            keyboard_buttons.append([types.InlineKeyboardButton(text=btn_text, url=btn_url)])
    if not keyboard_buttons:
        return None
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

async def process_mailing_content(message: Message, state: FSMContext, mail_type: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF.
    """
    content = {}
    if message.photo:
        content = {
            'type': 'photo',
            'file_id': message.photo[-1].file_id,
            'caption': message.caption
        }
    elif message.video:
        content = {
            'type': 'video',
            'file_id': message.video.file_id,
            'caption': message.caption
        }
    elif message.animation:
        content = {
            'type': 'animation',
            'file_id': message.animation.file_id,
            'caption': message.caption
        }
    elif message.text:
        content = {
            'type': 'text',
            'text': message.html_text
        }
    else:
        await message.answer("‚ö†Ô∏è Bu habar g√∂rn√º≈üi goldanma√Ωar. Tekst, surat, wideo √Ωa-da GIF iberi≈à.")
        return

    await state.update_data(mailing_content=content)
    
    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = message.chat.id

    try:
        await bot.delete_message(admin_chat_id, admin_message_id)
    except (TelegramBadRequest, AttributeError):
        pass

    preview_text = "üóÇÔ∏è <b>√ñ≈à√ºnden tassykla≈à:</b>\n\nHabary≈àyz a≈üakdaky √Ωaly bolar. Iber√Ω√§rismi?"
    
    preview_message = await send_mail_preview(admin_chat_id, content)

    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ D√ºwmesiz ibermek", callback_data=f"{mail_type}_mail_confirm_send")],
        [InlineKeyboardButton(text="‚ûï D√ºwmeleri go≈ümak", callback_data=f"{mail_type}_mail_confirm_add_buttons")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr", callback_data="admin_panel_main")]
    ])
    confirm_msg = await bot.send_message(admin_chat_id, preview_text, reply_markup=confirmation_keyboard)

    await state.update_data(admin_message_id=confirm_msg.message_id, preview_message_id=preview_message.message_id)

    if mail_type == "user":
        await state.set_state(AdminStates.waiting_for_mailing_confirmation)
    else:
        await state.set_state(AdminStates.waiting_for_channel_mailing_confirmation)


async def execute_user_broadcast(admin_message: types.Message, mailing_content: dict, mailing_keyboard: types.InlineKeyboardMarkup | None):
    users_to_mail = await get_users_from_db()
    
    if not users_to_mail:
        await admin_message.edit_text("üë• Ibermek √º√ßin ulanyjylar √Ωok.", reply_markup=back_to_admin_markup)
        return

    await admin_message.edit_text(f"‚è≥ <b>{len(users_to_mail)}</b> sany ulanyja ibermek ba≈ülan√Ωar...", reply_markup=None)

    success_count = 0
    fail_count = 0
    for user_id in users_to_mail:
        try:
            await send_mail_preview(user_id, mailing_content, mailing_keyboard)
            success_count += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            fail_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"Ulanyja {user_id} iberlende n√§belli √Ωal≈ày≈ülyk: {e}")
        await asyncio.sleep(0.1)

    await save_last_mail_content(mailing_content, mailing_keyboard, "user")

    final_report_text = f"‚úÖ <b>Ulanyjylara Iberi≈ü Tamamlandy</b> ‚úÖ\n\nüëç √úst√ºnlikli: {success_count}\nüëé Ba≈üartmady: {fail_count}"
    await admin_message.edit_text(final_report_text, reply_markup=back_to_admin_markup)


@router.callback_query(lambda c: c.data == "start_mailing")
async def start_mailing_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id): return
    
    last_content, _ = await get_last_mail_content("user")
    
    keyboard_buttons = [[InlineKeyboardButton(text="‚ûï T√§ze habar d√∂retmek", callback_data="create_new_user_mail")]]
    if last_content:
        keyboard_buttons.insert(0, [InlineKeyboardButton(text="üîÑ So≈àky habary ulanmak", callback_data="repeat_last_user_mail")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Yza", callback_data="admin_panel_main")])
    
    await callback.message.edit_text(
        "üì¨ <b>Ulanyjylara Iberi≈ü</b> üì¨\n\nBir hereket sa√Ωla≈à:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await state.set_state(AdminStates.waiting_for_user_mail_action)
    await callback.answer()


@router.callback_query(AdminStates.waiting_for_user_mail_action)
async def process_user_mail_action(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data
    if action == "create_new_user_mail":
        await callback.message.edit_text(
            "‚úçÔ∏è Ibermek isle√Ω√§n habary≈àyzy (tekst, surat, wideo √Ωa-da GIF) iberi≈à.",
            reply_markup=back_to_admin_markup
        )
        await state.update_data(admin_message_id=callback.message.message_id)
        await state.set_state(AdminStates.waiting_for_mailing_message)
    elif action == "repeat_last_user_mail":
        content, keyboard = await get_last_mail_content("user")
        if not content:
            await callback.answer("‚ö†Ô∏è So≈àky habar tapylmady.", show_alert=True)
            return

        await state.update_data(mailing_content=content, mailing_keyboard=keyboard)
        await callback.message.delete()
        
        preview_text = "üóÇÔ∏è <b>So≈àky habary tassykla≈à:</b>\n\n≈ûu habary ulanyjylara iber√Ω√§rismi?"
        preview_msg = await send_mail_preview(callback.from_user.id, content, keyboard)
        
        confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ Hawa, ibermek", callback_data="user_mail_confirm_send_repeated")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùok, yza", callback_data="admin_panel_main")]
        ])
        confirm_msg = await bot.send_message(callback.from_user.id, preview_text, reply_markup=confirmation_keyboard)

        await state.update_data(admin_message_id=confirm_msg.message_id, preview_message_id=preview_msg.message_id)
        await state.set_state(AdminStates.waiting_for_mailing_confirmation)
    await callback.answer()


@router.message(AdminStates.waiting_for_mailing_message, F.content_type.in_({'text', 'photo', 'video', 'animation'}))
async def process_user_mailing_message(message: Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    await process_mailing_content(message, state, "user")


@router.callback_query(AdminStates.waiting_for_mailing_confirmation)
async def process_user_mailing_confirmation(callback: types.CallbackQuery, state: FSMContext):
    fsm_data = await state.get_data()
    mailing_content = fsm_data.get('mailing_content')
    mailing_keyboard = fsm_data.get('mailing_keyboard')
    
    try:
        await bot.delete_message(callback.from_user.id, fsm_data.get('admin_message_id'))
        await bot.delete_message(callback.from_user.id, fsm_data.get('preview_message_id'))
    except (TelegramBadRequest, KeyError): pass

    if not mailing_content:
        await bot.send_message(callback.from_user.id, "‚ö†Ô∏è √ùal≈ày≈ülyk: habar tapylmady.", reply_markup=back_to_admin_markup)
        await state.clear()
        return

    if callback.data in ["user_mail_confirm_send", "user_mail_confirm_send_repeated"]:
        msg_for_broadcast = await bot.send_message(callback.from_user.id, "‚è≥...")
        await execute_user_broadcast(msg_for_broadcast, mailing_content, mailing_keyboard)
        await state.clear()
    elif callback.data == "user_mail_confirm_add_buttons":
        msg = await bot.send_message(
            callback.from_user.id,
            "üîó <b>D√ºwmeleri go≈ümak</b> üîó\n\nFormat: <code>Tekst - https://salgy.com</code>\nHer d√ºwme t√§ze setirde.",
            reply_markup=back_to_admin_markup
        )
        await state.update_data(admin_message_id=msg.message_id)
        await state.set_state(AdminStates.waiting_for_mailing_buttons)
    await callback.answer()


@router.message(AdminStates.waiting_for_mailing_buttons)
async def process_user_mailing_buttons(message: Message, state: FSMContext):
    keyboard = parse_buttons_from_text(message.text)
    if not keyboard:
        await message.answer("‚ö†Ô∏è N√§dogry format! T√§zeden synany≈üy≈à.")
        return
    
    await message.delete()
    fsm_data = await state.get_data()
    mailing_content = fsm_data.get('mailing_content')
    
    try: await bot.delete_message(message.chat.id, fsm_data.get('admin_message_id'))
    except (TelegramBadRequest, KeyError): pass

    msg_for_broadcast = await bot.send_message(message.chat.id, "‚è≥...")
    await execute_user_broadcast(msg_for_broadcast, mailing_content, keyboard)
    await state.clear()


async def execute_channel_broadcast(admin_message: types.Message, mailing_content: dict, mailing_keyboard: types.InlineKeyboardMarkup | None):
    channels_to_mail = await get_channels_from_db()
    if not channels_to_mail:
        await admin_message.edit_text("üì¢ Ibermek √º√ßin kanallar √Ωok.", reply_markup=back_to_admin_markup)
        return

    await admin_message.edit_text(f"‚è≥ <b>{len(channels_to_mail)}</b> sany kanala ibermek ba≈ülan√Ωar...", reply_markup=None)

    success_count = 0
    fail_count = 0
    for channel in channels_to_mail:
        try:
            await send_mail_preview(channel['id'], mailing_content, mailing_keyboard)
            success_count += 1
        except (TelegramForbiddenError, TelegramBadRequest) as e:
            fail_count += 1
            logging.warning(f"Kanala {channel['name']} ({channel['id']}) habar ibermek ba≈üartmady: {e}")
        except Exception as e:
            fail_count += 1
            logging.error(f"Kanala {channel['name']} ({channel['id']}) iberlende n√§belli √Ωal≈ày≈ülyk: {e}")
        await asyncio.sleep(0.2)
    
    await save_last_mail_content(mailing_content, mailing_keyboard, "channel")

    final_report_text = f"‚úÖ <b>Kanallara Iberi≈ü Tamamlandy</b> ‚úÖ\n\nüëç √úst√ºnlikli: {success_count}\nüëé Ba≈üartmady: {fail_count}"
    await admin_message.edit_text(final_report_text, reply_markup=back_to_admin_markup)

@router.callback_query(lambda c: c.data == "start_channel_mailing")
async def start_channel_mailing_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id): return
    
    last_content, _ = await get_last_mail_content("channel")
    
    keyboard_buttons = [[InlineKeyboardButton(text="‚ûï T√§ze habar d√∂retmek", callback_data="create_new_channel_mail")]]
    if last_content:
        keyboard_buttons.insert(0, [InlineKeyboardButton(text="üîÑ So≈àky habary ulanmak", callback_data="repeat_last_channel_mail")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Yza", callback_data="admin_panel_main")])

    await callback.message.edit_text(
        "üì¢ <b>Kanallara Iberi≈ü</b> üì¢\n\nBir hereket sa√Ωla≈à:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await state.set_state(AdminStates.waiting_for_channel_mail_action)
    await callback.answer()


@router.callback_query(AdminStates.waiting_for_channel_mail_action)
async def process_channel_mail_action(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data
    if action == "create_new_channel_mail":
        await callback.message.edit_text(
            "‚úçÔ∏è Ibermek isle√Ω√§n habary≈àyzy (tekst, surat, wideo √Ωa-da GIF) iberi≈à.",
            reply_markup=back_to_admin_markup
        )
        await state.update_data(admin_message_id=callback.message.message_id)
        await state.set_state(AdminStates.waiting_for_channel_mailing_message)
    elif action == "repeat_last_channel_mail":
        content, keyboard = await get_last_mail_content("channel")
        if not content:
            await callback.answer("‚ö†Ô∏è So≈àky habar tapylmady.", show_alert=True)
            return

        await state.update_data(mailing_content=content, mailing_keyboard=keyboard)
        await callback.message.delete()
        
        preview_text = "üóÇÔ∏è <b>So≈àky habary tassykla≈à:</b>\n\n≈ûu habary kanallara iber√Ω√§rismi?"
        preview_msg = await send_mail_preview(callback.from_user.id, content, keyboard)
        
        confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ Hawa, ibermek", callback_data="channel_mail_confirm_send_repeated")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùok, yza", callback_data="admin_panel_main")]
        ])
        confirm_msg = await bot.send_message(callback.from_user.id, preview_text, reply_markup=confirmation_keyboard)

        await state.update_data(admin_message_id=confirm_msg.message_id, preview_message_id=preview_msg.message_id)
        await state.set_state(AdminStates.waiting_for_channel_mailing_confirmation)
    await callback.answer()


@router.message(AdminStates.waiting_for_channel_mailing_message, F.content_type.in_({'text', 'photo', 'video', 'animation'}))
async def process_channel_mailing_message(message: Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    await process_mailing_content(message, state, "channel")


@router.callback_query(AdminStates.waiting_for_channel_mailing_confirmation)
async def process_channel_mailing_confirmation(callback: types.CallbackQuery, state: FSMContext):
    fsm_data = await state.get_data()
    mailing_content = fsm_data.get('mailing_content')
    mailing_keyboard = fsm_data.get('mailing_keyboard')
    
    try:
        await bot.delete_message(callback.from_user.id, fsm_data.get('admin_message_id'))
        await bot.delete_message(callback.from_user.id, fsm_data.get('preview_message_id'))
    except (TelegramBadRequest, KeyError): pass

    if not mailing_content:
        await bot.send_message(callback.from_user.id, "‚ö†Ô∏è √ùal≈ày≈ülyk: habar tapylmady.", reply_markup=back_to_admin_markup)
        await state.clear()
        return

    if callback.data in ["channel_mail_confirm_send", "channel_mail_confirm_send_repeated"]:
        msg_for_broadcast = await bot.send_message(callback.from_user.id, "‚è≥...")
        await execute_channel_broadcast(msg_for_broadcast, mailing_content, mailing_keyboard)
        await state.clear()
    elif callback.data == "channel_mail_confirm_add_buttons":
        msg = await bot.send_message(
            callback.from_user.id,
            "üîó <b>D√ºwmeleri go≈ümak</b> üîó\n\nFormat: <code>Tekst - https://salgy.com</code>\nHer d√ºwme t√§ze setirde.",
            reply_markup=back_to_admin_markup
        )
        await state.update_data(admin_message_id=msg.message_id)
        await state.set_state(AdminStates.waiting_for_channel_mailing_buttons)
    await callback.answer()


@router.message(AdminStates.waiting_for_channel_mailing_buttons)
async def process_channel_mailing_buttons(message: Message, state: FSMContext):
    keyboard = parse_buttons_from_text(message.text)
    if not keyboard:
        await message.answer("‚ö†Ô∏è N√§dogry format! T√§zeden synany≈üy≈à.")
        return
    
    await message.delete()
    fsm_data = await state.get_data()
    mailing_content = fsm_data.get('mailing_content')

    try: await bot.delete_message(message.chat.id, fsm_data.get('admin_message_id'))
    except (TelegramBadRequest, KeyError): pass
    
    msg_for_broadcast = await bot.send_message(message.chat.id, "‚è≥...")
    await execute_channel_broadcast(msg_for_broadcast, mailing_content, keyboard)
    await state.clear()


@router.callback_query(lambda c: c.data == "add_channel")
async def process_add_channel_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    await callback.message.edit_text(
        "üì° <b>Kanal Go≈ümak</b> üì°\n\n"
        "Kanaly≈à ID-sini girizi≈à (meselem, <code>@PublicChannel</code>) √Ωa-da ≈üahsy kanaly≈à ID-sini (meselem, <code>-1001234567890</code>).\n\n"
        "<i>Bot, agzalar barada maglumat almak hukugy bilen kanala administrator h√∂km√ºnde go≈üulmaly.</i>\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")]])
    )
    await state.update_data(admin_message_id=callback.message.message_id, admin_chat_id=callback.message.chat.id)
    await state.set_state(AdminStates.waiting_for_channel_id)
    await callback.answer()


@router.message(AdminStates.waiting_for_channel_id)
async def process_channel_id(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    channel_id_input = message.text.strip()
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    original_prompt_id = (
        "üì° <b>Kanal Go≈ümak: ID</b> üì°\n\n"
        "Kanaly≈à ID-sini girizi≈à (<code>@PublicChannel</code> √Ωa-da <code>-100...</code>).\n"
        "<i>Bot kanalda administrator bolmaly.</i>"
    )
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not admin_message_id or not admin_chat_id:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy. Admin panelden t√§zeden synany≈üy≈à.", reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    if not (channel_id_input.startswith('@') or (channel_id_input.startswith('-100') and channel_id_input[1:].replace('-', '', 1).isdigit())):
        await bot.edit_message_text(
            f"‚ö†Ô∏è <b>√ùal≈ày≈ülyk:</b> N√§dogry kanal ID formaty.\n\n{original_prompt_id}",
            chat_id=admin_chat_id, message_id=admin_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row])
        )
        return

    channels_in_db = await get_channels_from_db()
    if any(str(ch['id']) == str(channel_id_input) for ch in channels_in_db):
        await bot.edit_message_text(f"‚ö†Ô∏è Bu kanal (<code>{channel_id_input}</code>) e√Ω√Ω√§m sanawda bar.\n\n{original_prompt_id}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    try:
        chat_to_check_str = channel_id_input
        chat_to_check = int(chat_to_check_str) if not chat_to_check_str.startswith('@') else chat_to_check_str
        
        bot_member = await bot.get_chat_member(chat_id=chat_to_check, user_id=bot.id)
        if bot_member.status not in ['administrator', 'creator']:
            await bot.edit_message_text(
                "‚ö†Ô∏è <b>√ùal≈ày≈ülyk:</b> Bot bu kanaly≈à administratory d√§l (√Ωa-da gatna≈üyjylar barada maglumat almak hukugy √Ωok).\n"
                "Ha√Ωy≈ü ed√Ω√§ris, boty kanala zerur hukuklar bilen administrator h√∂km√ºnde go≈üu≈à we t√§zeden synany≈üy≈à.",
                chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup
            )
            await state.clear()
            return
    except ValueError:
        await bot.edit_message_text(
            f"‚ö†Ô∏è <b>√ùal≈ày≈ülyk:</b> ≈ûahsy kanaly≈à ID-si san bolmaly (meselem, <code>-1001234567890</code>).\n\n{original_prompt_id}",
            chat_id=admin_chat_id, message_id=admin_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row])
        )
        return
    except TelegramBadRequest as e:
        logging.error(f"TelegramBadRequest –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_id_input}: {e}")
        error_detail = str(e)
        specific_guidance = ""
        if "member list is inaccessible" in error_detail.lower():
            specific_guidance = ("<b>Maslahat:</b> Botu≈à '√áaty dolandyryp bilmek' √Ωa-da ≈ü.m., gatna≈üyjylary≈à sanawyny almaga m√ºmkin√ßilik ber√Ω√§n hukugyny≈à bardygyna g√∂z √Ωetiri≈à. K√§bir √Ωagda√Ωlarda, eger kanal √ßat bilen baglany≈üykly bolsa, hukuklar miras alnyp bilner.")
        elif "chat not found" in error_detail.lower():
            specific_guidance = "<b>Maslahat:</b> Kanal ID-sini≈à dogry girizilendigine we kanaly≈à bardygyna g√∂z √Ωetiri≈à. Jemgy√Ωet√ßilik kanallary √º√ßin @username, ≈üahsy kanallar √º√ßin bolsa sanly ID ( -100 bilen ba≈üla√Ωan) ulany≈à."
        elif "bot is not a member of the channel" in error_detail.lower() or "user not found" in error_detail.lower():
             specific_guidance = "<b>Maslahat:</b> Bot g√∂rkezilen kanaly≈à agzasy d√§l. Ha√Ωy≈ü ed√Ω√§ris, ilki boty kanala go≈üu≈à."
        await bot.edit_message_text(
            f"‚ö†Ô∏è <b>Boty≈à kanaldaky √Ωagda√Ωyny barlamakda √Ωal≈ày≈ülyk:</b>\n<code>{error_detail}</code>\n\n"
            f"{specific_guidance}\n\n"
            "ID-ni≈à dogrudygyny, boty≈à kanala go≈üulandygyny we zerur administrator hukuklaryny≈à bardygyny barla≈à.",
            chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup
        )
        await state.clear()
        return
    except Exception as e:
        logging.error(f"√Ωal≈ày≈ülyk {channel_id_input}: {e}")
        await bot.edit_message_text(
            f"‚ö†Ô∏è <b>Boty≈à kanaldaky √Ωagda√Ωyny barlamakda gara≈üylmadyk √Ωal≈ày≈ülyk:</b> <code>{e}</code>.\n"
            "ID-ni≈à dogrudygyny, boty≈à kanala go≈üulandygyny we administrator hukuklaryny≈à bardygyny barla≈à.",
            chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup
        )
        await state.clear()
        return

    await state.update_data(channel_id=channel_id_input)
    await bot.edit_message_text(
        "‚úèÔ∏è Indi bu kanal √º√ßin <b>g√∂rkezil√Ω√§n ady</b> girizi≈à (meselem, <i>TKM VPNLAR</i>):",
        chat_id=admin_chat_id, message_id=admin_message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row])
    )
    await state.set_state(AdminStates.waiting_for_channel_name)


@router.message(AdminStates.waiting_for_channel_name)
async def save_channel(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    channel_name = message.text.strip()
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    channel_id_str = fsm_data.get('channel_id')
    original_prompt_name = "‚úèÔ∏è Kanal √º√ßin <b>g√∂rkezil√Ω√§n ady</b> girizi≈à (meselem, <i>Tehnologi√Ωa Habarlary</i>):"
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not all([admin_message_id, admin_chat_id, channel_id_str]):
        err_msg_text = "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy (zerur maglumatlar √Ωok). Kanaly t√§zeden go≈ümagy synany≈üy≈à."
        if admin_message_id and admin_chat_id:
            try:
                await bot.edit_message_text(err_msg_text, chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
            except TelegramBadRequest:
                 await bot.send_message(admin_chat_id, err_msg_text, reply_markup=back_to_admin_markup)
        else:
            await bot.send_message(message.chat.id, err_msg_text, reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    if not channel_name:
        await bot.edit_message_text(f"‚ö†Ô∏è Kanal ady bo≈ü bolup bilmez.\n\n{original_prompt_name}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    success = await add_channel_to_db(channel_id_str, channel_name)
    if success:
        await bot.edit_message_text(f"‚úÖ <b>{channel_name}</b> kanaly (<code>{channel_id_str}</code>) √ºst√ºnlikli go≈üuldy!", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    else:
        await bot.edit_message_text(f"‚ö†Ô∏è <b>{channel_name}</b> kanalyny (<code>{channel_id_str}</code>) go≈ümak ba≈üartmady. M√ºmkin, ol e√Ω√Ω√§m bar √Ωa-da maglumatlar bazasynda √Ωal≈ày≈ülyk boldy.", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    await state.clear()


@router.callback_query(lambda c: c.data == "delete_channel")
async def process_delete_channel_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    channels = await get_channels_from_db()

    if not channels:
        await callback.message.edit_text("üóëÔ∏è Kanallary≈à sanawy bo≈ü. Pozmak √º√ßin hi√ß zat √Ωok.", reply_markup=back_to_admin_markup)
        await callback.answer()
        return

    keyboard_buttons = [
        [InlineKeyboardButton(text=f"{channel['name']} ({channel['id']})", callback_data=f"del_channel:{channel['id']}")] for channel in channels
    ]
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")])

    await callback.message.edit_text("üî™ <b>Kanal Pozmak</b> üî™\n\nSanawdan pozmak √º√ßin kanaly sa√Ωla≈à:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
    await callback.answer()


@router.callback_query(lambda c: c.data == "admin_panel_main")
async def back_to_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    admin_reply_markup = create_admin_keyboard(callback.from_user.id)
    try:
        await callback.message.edit_text(
            "‚öôÔ∏è <b>Admin-panel</b>\n\nBir hereket sa√Ωla≈à:",
            reply_markup=admin_reply_markup
        )
    except TelegramBadRequest:
        await callback.message.answer(
             "‚öôÔ∏è <b>Admin-panel</b>\n\nBir hereket sa√Ωla≈à:",
            reply_markup=admin_reply_markup
        )
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    await state.clear()
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_channel:"))
async def confirm_delete_channel(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    channel_id_to_delete_str = callback.data.split(":", 1)[1]

    deleted = await delete_channel_from_db(channel_id_to_delete_str)

    if deleted:
        await callback.message.edit_text(f"üóëÔ∏è Kanal (<code>{channel_id_to_delete_str}</code>) √ºst√ºnlikli pozuldy.", reply_markup=back_to_admin_markup)
        await callback.answer("Kanal pozuldy", show_alert=False)
    else:
        await callback.message.edit_text("‚ö†Ô∏è Kanal tapylmady √Ωa-da pozmakda √Ωal≈ày≈ülyk √Ω√ºze √ßykdy.", reply_markup=back_to_admin_markup)
        await callback.answer("Kanal tapylmady √Ωa-da √Ωal≈ày≈ülyk", show_alert=True)


@router.callback_query(lambda c: c.data == "add_addlist")
async def process_add_addlist_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    await callback.message.edit_text(
        "üîó <b>addlist Go≈ümak (Addlist)</b> üîó\n\n"
        "addlistny≈à URL-ni girizi≈à (meselem, <code>https://t.me/addlist/xxxxxx</code>).\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")]])
    )
    await state.update_data(admin_message_id=callback.message.message_id, admin_chat_id=callback.message.chat.id)
    await state.set_state(AdminStates.waiting_for_addlist_url)
    await callback.answer()


@router.message(AdminStates.waiting_for_addlist_url)
async def process_addlist_url(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    addlist_url = message.text.strip()
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    original_prompt_url = "üîó <b>addlist Go≈ümak: URL</b> üîó\n\naddlistny≈à URL-ni girizi≈à (<code>https://t.me/addlist/xxxx</code>)."
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not admin_message_id or not admin_chat_id:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy. T√§zeden synany≈üy≈à.", reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    if not addlist_url.startswith("https://t.me/addlist/"):
        await bot.edit_message_text(
            f"‚ö†Ô∏è <b>√ùal≈ày≈ülyk:</b> URL <code>https://t.me/addlist/</code> bilen ba≈ülamaly.\n\n{original_prompt_url}",
            chat_id=admin_chat_id, message_id=admin_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row])
        )
        return

    addlists_in_db = await get_addlists_from_db()
    if any(al['url'] == addlist_url for al in addlists_in_db):
        await bot.edit_message_text(f"‚ö†Ô∏è Bu addlist (<code>{addlist_url}</code>) e√Ω√Ω√§m go≈üulan.\n\n{original_prompt_url}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    await state.update_data(addlist_url=addlist_url)
    await bot.edit_message_text(
        "‚úèÔ∏è Indi bu addlist √º√ßin <b>g√∂rkezil√Ω√§n ady</b> girizi≈à (meselem, <i>Pe√Ωdaly Kanallar</i>):",
        chat_id=admin_chat_id, message_id=admin_message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row])
    )
    await state.set_state(AdminStates.waiting_for_addlist_name)


@router.message(AdminStates.waiting_for_addlist_name)
async def save_addlist_name(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    addlist_name = message.text.strip()
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    addlist_url = fsm_data.get('addlist_url')
    original_prompt_name = "‚úèÔ∏è addlist √º√ßin <b>g√∂rkezil√Ω√§n ady</b> girizi≈à (meselem, <i>Pe√Ωdaly Kanallar</i>):"
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not all([admin_message_id, admin_chat_id, addlist_url]):
        err_msg_text = "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy (URL √Ωok). addlistny t√§zeden go≈ümagy synany≈üy≈à."
        if admin_message_id and admin_chat_id:
             try:
                await bot.edit_message_text(err_msg_text, chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
             except TelegramBadRequest:
                await bot.send_message(admin_chat_id, err_msg_text, reply_markup=back_to_admin_markup)
        else:
            await bot.send_message(message.chat.id, err_msg_text, reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    if not addlist_name:
        await bot.edit_message_text(f"‚ö†Ô∏è addlist ady bo≈ü bolup bilmez.\n\n{original_prompt_name}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    success = await add_addlist_to_db(addlist_name, addlist_url)
    if success:
        await bot.edit_message_text(f"‚úÖ <b>{addlist_name}</b> addlistsy (<code>{addlist_url}</code>) √ºst√ºnlikli go≈üuldy.", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    else:
        await bot.edit_message_text(f"‚ö†Ô∏è <b>{addlist_name}</b> addlistsy (<code>{addlist_url}</code>) go≈ümak ba≈üartmady. M√ºmkin, ol e√Ω√Ω√§m bar √Ωa-da maglumatlar bazasynda √Ωal≈ày≈ülyk boldy.", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    await state.clear()


@router.callback_query(lambda c: c.data == "delete_addlist")
async def process_delete_addlist_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    addlists = await get_addlists_from_db()

    if not addlists:
        await callback.message.edit_text("üóëÔ∏è addlistlary≈à (Addlists) sanawy bo≈ü. Pozmak √º√ßin hi√ß zat √Ωok.", reply_markup=back_to_admin_markup)
        await callback.answer()
        return

    keyboard_buttons = [
        [InlineKeyboardButton(text=f"{al['name']} ({al['url'][:30]}...)", callback_data=f"del_addlist_id:{al['db_id']}")]
        for al in addlists
    ]
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")])

    await callback.message.edit_text("üî™ <b>addlist Pozmak (Addlist)</b> üî™\n\nPozmak √º√ßin addlist sa√Ωla≈à:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_addlist_id:"))
async def confirm_delete_addlist(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    try:
        addlist_db_id_to_delete = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.message.edit_text("‚ö†Ô∏è √ùal≈ày≈ülyk: N√§dogry addlist ID-si.", reply_markup=back_to_admin_markup)
        await callback.answer("ID √Ωal≈ày≈ülygy", show_alert=True)
        return

    addlists = await get_addlists_from_db()
    addlist_to_delete = next((al for al in addlists if al['db_id'] == addlist_db_id_to_delete), None)

    if addlist_to_delete:
        deleted = await delete_addlist_from_db(addlist_db_id_to_delete)
        if deleted:
            await callback.message.edit_text(f"üóëÔ∏è <b>{addlist_to_delete['name']}</b> addlistsy √ºst√ºnlikli pozuldy.", reply_markup=back_to_admin_markup)
            await callback.answer("addlist pozuldy", show_alert=False)
        else:
            await callback.message.edit_text("‚ö†Ô∏è addlistny maglumatlar bazasyndan pozmakda √Ωal≈ày≈ülyk.", reply_markup=back_to_admin_markup)
            await callback.answer("Pozmak √Ωal≈ày≈ülygy", show_alert=True)
    else:
        await callback.message.edit_text("‚ö† addlist tapylmady √Ωa-da e√Ω√Ω√§m pozuldy.", reply_markup=back_to_admin_markup)
        await callback.answer("addlist tapylmady", show_alert=True)

@router.callback_query(lambda c: c.data == "add_vpn_config")
async def process_add_vpn_config_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    await callback.message.edit_text(
        "üîë <b>VPN Kody Go≈ümak</b> üîë\n\n"
        "VPN <b>kodyny</b> iberi≈à. Ol bol≈üy √Ωaly saklanar we ulanyja <code>≈ûe√Ωle g√∂rnu≈üde</code> berler.\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")]])
    )
    await state.update_data(admin_message_id=callback.message.message_id, admin_chat_id=callback.message.chat.id)
    await state.set_state(AdminStates.waiting_for_vpn_config)
    await callback.answer()


@router.message(AdminStates.waiting_for_vpn_config)
async def save_vpn_config(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    vpn_config_text = message.text.strip()
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    original_prompt_vpn = "üîë <b>VPN kodyny Go≈ümak: Kody≈à Teksti</b> üîë\n\nVPN kodyny iberi≈à."
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not admin_message_id or not admin_chat_id:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy. T√§zeden synany≈üy≈à.", reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    if not vpn_config_text:
        await bot.edit_message_text(f"‚ö†Ô∏è VPN kody bo≈ü bolup bilmez.\n\n{original_prompt_vpn}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    success = await add_vpn_config_to_db(vpn_config_text)
    if success:
        await bot.edit_message_text("‚úÖ VPN kody √ºst√ºnlikli go≈üuldy.", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    else:
        await bot.edit_message_text("‚ö†Ô∏è VPN kodyny go≈ümak ba≈üartmady. M√ºmkin, ol e√Ω√Ω√§m bar √Ωa-da maglumatlar bazasynda √Ωal≈ày≈ülyk boldy.", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    await state.clear()

@router.callback_query(lambda c: c.data == "delete_vpn_config")
async def process_delete_vpn_config_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    vpn_configs = await get_vpn_configs_from_db()

    if not vpn_configs:
        await callback.message.edit_text("üóëÔ∏è VPN kody sanawy bo≈ü. Pozmak √º√ßin hi√ß zat √Ωok.", reply_markup=back_to_admin_markup)
        await callback.answer()
        return

    keyboard_buttons = [
        [InlineKeyboardButton(text=f"Konfig #{i+1} (<code>{item['config_text'][:25]}...</code>)", callback_data=f"del_vpn_id:{item['db_id']}")] 
        for i, item in enumerate(vpn_configs)
    ]
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")])

    await callback.message.edit_text("üî™ <b>VPN Kodyny Pozmak</b> üî™\n\nPozmak √º√ßin kody sa√Ωla≈à:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_vpn_id:"))
async def confirm_delete_vpn_config(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    try:
        config_db_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.message.edit_text("‚ö†Ô∏è √ùal≈ày≈ülyk: N√§dogry kod ID-si.", reply_markup=back_to_admin_markup)
        await callback.answer("ID √Ωal≈ày≈ülygy", show_alert=True)
        return
    
    all_configs = await get_vpn_configs_from_db()
    config_to_delete = next((c for c in all_configs if c['db_id'] == config_db_id), None)
    
    deleted = await delete_vpn_config_from_db(config_db_id)
    if deleted:
        preview = f"(<code>...{config_to_delete['config_text'][:20]}...</code>)" if config_to_delete else ""
        await callback.message.edit_text(f"üóëÔ∏è VPN kody {preview} √ºst√ºnlikli pozuldy.", reply_markup=back_to_admin_markup)
        await callback.answer("VPN Kody pozuldy", show_alert=False)
    else:
        await callback.message.edit_text("‚ö†Ô∏è Kod tapylmady, e√Ω√Ω√§m pozuldy √Ωa-da maglumatlar bazasynda √Ωal≈ày≈ülyk boldy.", reply_markup=back_to_admin_markup)
        await callback.answer("Kod tapylmady/√Ωal≈ày≈ülyk", show_alert=True)

@router.callback_query(lambda c: c.data == "change_welcome")
async def process_change_welcome_prompt(callback: types.CallbackQuery, state: FSMContext):
    if not await is_user_admin_in_db(callback.from_user.id):
        await callback.answer("‚õî Giri≈ü gadagan.", show_alert=True)
        return
    
    current_welcome = await get_setting_from_db("welcome_message", "<i>H√§zirki Ba≈ülangy√ß haty √Ωok.</i>")
    await callback.message.edit_text(
        f"üìù <b>Ba≈ülangy√ß hatyny √ú√Ωtgetmek</b> üìù\n\n"
        f"H√§zirki ba≈ülangy√ß haty:\n"
        f"<blockquote>{current_welcome}</blockquote>\n"
        f"T√§ze ba≈ülangy√ß hatyny girizi≈à."
        f"Formatlamak √º√ßin HTML teglerini ulanyp bilersi≈àiz (meselem, <b>galy≈à</b>, <i>kursiw</i>, <a href='https://example.com'>salgy</a>, <code>kod</code>).\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")]])
    )
    await state.update_data(admin_message_id=callback.message.message_id, admin_chat_id=callback.message.chat.id)
    await state.set_state(AdminStates.waiting_for_welcome_message)
    await callback.answer()


@router.message(AdminStates.waiting_for_welcome_message)
async def save_welcome_message(message: types.Message, state: FSMContext):
    if not await is_user_admin_in_db(message.from_user.id): return
    new_welcome_message = message.html_text
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not admin_message_id or not admin_chat_id:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy. T√§zeden synany≈üy≈à.", reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    if not new_welcome_message or not new_welcome_message.strip():
        current_welcome = await get_setting_from_db("welcome_message", "<i>ba≈ülangy√ß haty √Ωok.</i>")
        await bot.edit_message_text(
            f"‚ö†Ô∏è <b>√ùal≈ày≈ülyk:</b> Ba≈ülangy√ß haty bo≈ü bolup bilmez.\n"
            f"H√§zirki Ba≈ülangy√ß haty:\n<blockquote>{current_welcome}</blockquote>\n\n"
            f"T√§ze ba≈ülangy√ß hatyny girizi≈à √Ωa-da amaly √Ωatyry≈à.",
            chat_id=admin_chat_id, message_id=admin_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]),
        )
        return

    await save_setting_to_db('welcome_message', new_welcome_message)
    await bot.edit_message_text("‚úÖ Ba≈ülangy√ß hat √ºst√ºnlikli t√§zelendi!", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    await state.clear()


@router.callback_query(lambda c: c.data == "add_admin")
async def add_admin_prompt(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚õî Bu funksi√Ωa di≈àe ba≈ü admin √º√ßin el√Ωeterlidir.", show_alert=True)
        return
    await callback.message.edit_text(
        "üëÆ <b>Admin Go≈ümak</b> üëÆ\n\n"
        "Admin bellemek isle√Ω√§n ulanyjy≈àyzy≈à Telegram User ID-sini girizi≈à.\n"
        "<i>User ID-ni @userinfobot √Ωa-da @getmyid_bot √Ωaly botlardan bilip bilersi≈àiz.</i>\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")]])
    )
    await state.update_data(admin_message_id=callback.message.message_id, admin_chat_id=callback.message.chat.id)
    await state.set_state(AdminStates.waiting_for_admin_id_to_add)
    await callback.answer()


@router.message(AdminStates.waiting_for_admin_id_to_add)
async def process_add_admin_id(message: types.Message, state: FSMContext):
    if message.from_user.id != SUPER_ADMIN_ID: return
    new_admin_id_str = message.text.strip()
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    fsm_data = await state.get_data()
    admin_message_id = fsm_data.get('admin_message_id')
    admin_chat_id = fsm_data.get('admin_chat_id')
    original_prompt_admin_id = (
        "üëÆ <b>Admin Go≈ümak: User ID</b> üëÆ\n\n"
        "Telegram User ID-ni (san) girizi≈à.\n"
        "<i>User ID-ni @userinfobot √Ωaly botlardan bilip bilersi≈àiz.</i>"
    )
    cancel_button_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è √ùatyr we yzyna", callback_data="admin_panel_main")]

    if not admin_message_id or not admin_chat_id:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è √ùagda√Ω √Ωal≈ày≈ülygy. T√§zeden synany≈üy≈à.", reply_markup=create_admin_keyboard(message.from_user.id))
        await state.clear()
        return

    try:
        new_admin_id = int(new_admin_id_str)
    except ValueError:
        await bot.edit_message_text(f"‚ö†Ô∏è <b>√ùal≈ày≈ülyk:</b> User ID san bolmaly.\n\n{original_prompt_admin_id}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    if new_admin_id == SUPER_ADMIN_ID:
        await bot.edit_message_text(f"‚ö†Ô∏è Ba≈ü admin e√Ω√Ω√§m √§hli hukuklara e√Ωe.\n\n{original_prompt_admin_id}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    current_admins = await get_admins_from_db()
    if new_admin_id in current_admins:
        await bot.edit_message_text(f"‚ö†Ô∏è <code>{new_admin_id}</code> ID-li ulanyjy e√Ω√Ω√§m admin.\n\n{original_prompt_admin_id}", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=InlineKeyboardMarkup(inline_keyboard=[cancel_button_row]))
        return

    success = await add_admin_to_db(new_admin_id)
    if success:
        await bot.edit_message_text(f"‚úÖ <code>{new_admin_id}</code> ID-li ulanyjy √ºst√ºnlikli admin bellenildi!", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    else:
        await bot.edit_message_text(f"‚ö†Ô∏è <code>{new_admin_id}</code> ID-li admini go≈ümak ba≈üartmady. Maglumatlar bazasy √Ωal≈ày≈ülygy.", chat_id=admin_chat_id, message_id=admin_message_id, reply_markup=back_to_admin_markup)
    await state.clear()


@router.callback_query(lambda c: c.data == "delete_admin")
async def delete_admin_prompt(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚õî Bu funksi√Ωa di≈àe ba≈ü admin √º√ßin el√Ωeterlidir.", show_alert=True)
        return

    admins_in_db = await get_admins_from_db()

    if not admins_in_db:
        await callback.message.edit_text("üö´ Go≈üma√ßa adminleri≈à sanawy bo≈ü. Pozmak √º√ßin hi√ß kim √Ωok.", reply_markup=back_to_admin_markup)
        await callback.answer()
        return

    keyboard_buttons = []
    for admin_id in admins_in_db:
        try:
            user = await bot.get_chat(admin_id)
            display_name = f"{user.full_name} (<code>{admin_id}</code>)" if user.full_name else f"Admin (<code>{admin_id}</code>)"
        except Exception:
            display_name = f"Admin (<code>{admin_id}</code>) - <i>ady almak ba≈üartmady</i>"
        keyboard_buttons.append([InlineKeyboardButton(text=display_name, callback_data=f"del_admin_id:{admin_id}")])

    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è Admin men√Ωusyna ga√Ωt", callback_data="admin_panel_main")])
    await callback.message.edit_text("üî™ <b>Admin Pozmak</b> üî™\n\nHukuklaryny yzyna almak √º√ßin admini sa√Ωla≈à:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("del_admin_id:"))
async def confirm_delete_admin(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != SUPER_ADMIN_ID:
        await callback.answer("‚õî Bu funksi√Ωa di≈àe ba≈ü admin √º√ßin el√Ωeterlidir.", show_alert=True)
        return

    try:
        admin_id_to_delete = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.message.edit_text("‚ö†Ô∏è √ùal≈ày≈ülyk: Pozmak √º√ßin n√§dogry admin ID-si.", reply_markup=back_to_admin_markup)
        await callback.answer("ID √Ωal≈ày≈ülygy", show_alert=True)
        return

    deleted = await delete_admin_from_db(admin_id_to_delete)
    if deleted:
        await callback.message.edit_text(f"üóëÔ∏è <code>{admin_id_to_delete}</code> ID-li admin √ºst√ºnlikli pozuldy.", reply_markup=back_to_admin_markup)
        await callback.answer("Admin pozuldy", show_alert=False)
    else:
        await callback.message.edit_text("‚ö†Ô∏è Admin tapylmady, e√Ω√Ω√§m pozuldy √Ωa-da maglumatlar bazasy √Ωal≈ày≈ülygy.", reply_markup=back_to_admin_markup)
        await callback.answer("Admin tapylmady/√Ωal≈ày≈ülyk", show_alert=True)


@router.callback_query(lambda c: c.data == "check_subscription")
async def process_check_subscription(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    vpn_configs_full = await get_vpn_configs_from_db()
    vpn_configs_texts = [item['config_text'] for item in vpn_configs_full]

    if not vpn_configs_texts:
        try:
            await callback.message.edit_text("üòî Gynansak-da, h√§zirki wagtda el√Ωeterli VPN kody √Ωok. Ha√Ωy≈ü ed√Ω√§ris, so≈àrak synany≈üy≈à.")
        except TelegramBadRequest:
            await callback.answer(text="üòî El√Ωeterli VPN kody √Ωok. So≈àrak synany≈üy≈à.", show_alert=True)
        await state.clear()
        return

    user_still_needs_to_subscribe = await has_unsubscribed_channels(user_id)
    channels_configured = bool(await get_channels_from_db())

    if not user_still_needs_to_subscribe:
        vpn_config_text = random.choice(vpn_configs_texts)
        text = "üéâ Siz √§hli kanallara agza boldu≈àyz." if channels_configured else "‚ú® Agza bolany≈àyz √º√ßin sagbolu≈à"
        try:
            await callback.message.edit_text(
                f"{text}\n\n"
                f"üîë <b>Sizi≈à VPN kodu≈àyz:</b>\n<pre><code>{vpn_config_text}</code></pre>",
                reply_markup=None
            )
            await callback.answer(text="‚úÖ Agzalyk barlandy!", show_alert=False)
        except TelegramBadRequest:
             await callback.answer(text="‚úÖ Agzalyk barlandy!", show_alert=False)
        await state.clear()
    else:
        new_keyboard = await create_subscription_task_keyboard(user_id)
        welcome_text_db = await get_setting_from_db('welcome_message', "üëã VPN kodyny almak √º√ßin, a≈üakdaky kanallara agza bolu≈à:")

        message_needs_update = False
        if callback.message:
            if (callback.message.html_text != welcome_text_db) or \
               (new_keyboard != callback.message.reply_markup):
                 message_needs_update = True

            if message_needs_update:
                try:
                    await callback.message.edit_text(welcome_text_db, reply_markup=new_keyboard)
                except TelegramBadRequest as e:
                    if "message is not modified" in str(e).lower():
                        pass
                    else:
                        logging.error(f"agzalygy barlanda habary redaktirlemekde √Ωal≈ày≈ülyk: {e}")
        await callback.answer(
            text="‚ö†Ô∏è Ha√Ωy≈ü ed√Ω√§ris, √§hli g√∂rkezilen kanallara agza bolu≈à we t√§zeden synan≈üy≈à",
            show_alert=True
        )

async def main():
    global DB_POOL
    try:
        DB_POOL = await asyncpg.create_pool(dsn=DATABASE_URL)
        if DB_POOL:
            logging.info("Successfully connected to PostgreSQL and connection pool created.")
            await init_db(DB_POOL)
            logging.info("Database initialized (tables created if they didn't exist).")
        else:
            logging.error("Failed to create database connection pool.")
            return
    except Exception as e:
        logging.critical(f"Failed to connect to PostgreSQL or initialize database: {e}")
        return

    await dp.start_polling(bot)

    if DB_POOL:
        await DB_POOL.close()
        logging.info("PostgreSQL connection pool closed.")

if __name__ == '__main__':
    asyncio.run(main())
